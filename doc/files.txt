

## Optional Files

### 'Loading' screen

Rhodes supports the display of a custom "Loading" screen while your application is launching. This screen's source is the file loading.html, located at <application-root>/app/loading.html.
<br/>
Alternatively, you can replace loading.html with an image named loading.png if you just want a simple image to be displayed.
Please see additional instruction about customization loading.png for iOS devices : [http://wiki.rhomobile.com/index.php/BuildingRhodes#HOWTO:_Customize_Loading_image  HOWTO: Customization Loading Image]
<br/>
Loading parameters in rhoconfig.txt:
* delay - how long splash screen should be displayed (in seconds)
* center,vcenter,hcenter - picture alignment
* zoom,vzoom,hzoom - scaling options
'''Example''':
*splash_screen='delay=5;center'
*splash_screen='delay=5;hcenter;vzoom'

### 'Installing' screen

<font color="red">'''''WARNING!''''' '''This section is outdated since Rhodes 2.2. There is no more 'installing' phase for iPhone and Android applications.'''</font>

On Android and iPhone, rhodes applications need to finish installation on first start. To properly indicate this to user, application should provide installing.html or installing.png located at <application-root>/app/ folder. If no such file provided, 'loading' page will be used as described above.

### Error handlers(400,500)
Rhodes can display the following error pages: app\E400.erb and app\E500.erb
* error 400 occurs when there's a Rho::RecordNotFound exception (for example, when you search for a non-existent objectID)
* error 500 occurs for any other unhanded exception
To get exception object use $! or Rho::RHO.current_exception


## Helpers

### link_to
Examples of how to use the link_to method:

	link_to "Visit Other Site", "http://www.rhomobile.com/"
	==> <a href="http://www.rhomobile.com/" >Visit Other Site</a>
  
	link_to "Help", { :action => "help" }
	==> <a href="/app/model/help" >Help</a>
  
	link_to "Delete", { :action => "delete", :id => '{12}' }
	==> <a href="/app/model/{12}/delete"  onclick="var f = document.createElement('form'); 
	    f.style.display = 'none';this.parentNode.appendChild(f); f.method = 'POST'; 
	    f.action = this.href;f.submit();return false;">Delete</a>
 
	link_to "Show", { :action => "show", :id => '{12}'},"style=\"height:4px;width:7px;border-width:0px;\"" 
	==> <a href="/app/model/{12}/show" style="height:4px;width:7px;border-width:0px;">Show</a>
  
	link_to "Delete", { :action => "delete", :id => '{12}' }, "class=\"delete_link\""
	==> <a href="/app/model/{12}/delete" class="delete_link" onclick="var f = document.createElement('form'); 
	    f.style.display = 'none';this.parentNode.appendChild(f); f.method = 'POST'; 
	    f.action = this.href;f.submit();return false;\">Delete</a>"
  
	link_to "Invite",:action => :invite, :query => {:name => 'John Smith', 'address' => "http://john.smith.com"}
	==> <a href="/app/model/invite?name=John%20Smith&address=http%3A%2F%2Fjohn.smith.com" >Invite</a>

### url_for
Examples of how to use the url_for method:
    
	url_for '/some_url'
	==> /some_url
    
When generating a new URL, missing values may be filled in from the current request's parameters.
For example, if the application name or model are not specified in the call parameters, they would be filled from the request.
    
	url_for :action => :index
	==> /app/model
  
	url_for :action => :create
	==> /app/model
 
	url_for :action => :new
	==> /app/model/new
  
	url_for :action => :show, :id => '{12}'
	==> /app/model/{12}/show

	url_for :model => :another_model, :action => :show, :id => '{12}'
	==> /app/another_model/{12}/show
  
	url_for :controller => :another_controller, :action => :show, :id => '{12}'
	==> /app/another_controller/{12}/show
  
	url_for :application => :another_app, :model => :another_model, :action => :show, :id => '{12}'
	==> /another_app/another_model/{12}/show
   
	url_for :action => :create, :query => {:name => 'John Smith', 'address' => "http://john.smith.com"}
	==> /app/model?name=John%20Smith&address=http%3A%2F%2Fjohn.smith.com
  
	url_for :action => :show, :id => '{12}', :fragment => "an-anchor" 
	==> /app/model/{12}/show#an-anchor

## Redefine back action
* use :back parameter in render:

	:::ruby
	render :action => :index, :back => url_for( :controller => :Settings, :action => :main_page )
	render :back => '/app'

* use back with callback:

:::ruby
render :action => :page_alert, :back => 'callback:' + url_for(:action => :callback_alert)

* you can also define back action in menu

:::ruby
@menu = { "Back" => :back,
    "Main Menu" => :home
}
render :action => :page_back

* redefine back with close:

	:::ruby
	render :action => :page_close, :back => :close

### Sample
See system-api-samples\app\DynamicMenu

## Advanced Usage of Render

* Render does not need to be called at the end of each method. If render was not called, then it will default to rendering the action of the method you are in. 
* Rendering of views works with no method in controller. If the method does not exist for an action, but a view exists for that action, then the view will be rendered. 
* Rendering of files.  render :file => "Settings/wait.erb"  will render that file with the current controller's instance. By default, layout is false when rendering a file. 
* Rendering of partials, with collections or locals. Either collections or locals must be provided. Rendering partials in other folders added in 2.0.

	:::ruby
	render :partial => "ad", :collection => ["foo1","foo2","foo3"] 

or 

	:::ruby
	render :partial =>"ad", :locals => { :ad => "foo_ad" } 

Will render the partial "_ad.erb"  and the local variable "ad" will be available. With a collection, the partial will be rendered once per element.

'''Added in 2.0'''

Load from 'partials' folder:

	:::ruby
	render :partial =>"partials/ad", :locals => { :ad => "foo_ad" } 

## WebView class
It is possible to call on the WebView (browser) directly from your controllers. This API is recommended for use from callbacks, such as sync callback or camera callbacks.

	:::ruby
	WebView.refresh #=> will force WebView refresh current page
	WebView.refresh(index) #=> will force WebView refresh current page on tab with specified index.
	                       #  If no tab bar present, index ignored

	WebView.navigate(url) #=> will force WebView navigate to provided location (url)

	# Since 1.2.2 WebView.navigate supports an optional index parameter (defaults to 0, useful for tabbed applications)
	WebView.navigate(url, index)

	WebView.current_location #=> will return location (url) of the currently displayed page
	WebView.current_location(index) #=> the same as above but for specified tab (if tab bar present)
 
	WebView.execute_js(js) #=> will try to execute javascript string in the context of the currently displayed page
	#supported on iPhone, Android, Windows Mobile and Blackberry 5.0 in full browser mode
	WebView.execute_js(js, index) #=> the same as above but for specified tab (if tab bar present)
	#For example:
	WebView.execute_js("test();") #call method test from current page
	Suppose that current page has js method:
	function test() {
	    alert("Test");
	}

	WebView.active_tab #=> returns index of @tabs array for currently selected tab

	WebView.full_screen_mode(enable) #=> switch to/from full screen mode

	# Set cookie to be used by WebView for specified url. Each time when WebView load specified url
	# (either by selecting link or in result of calling WebView.navigate), it will add this cookie
	# to the HTTP request. Cookie should be in format "NAME=VALUE". Multiple name/value pairs allowed.
	# In this case they need to be split by semicolon: "NAME1=VALUE1; NAME2=VALUE2".
	WebView.set_cookie(url, cookie)

### Sample
See controller and view in the /app/Image folder of the [http://github.com/rhomobile/rhodes-system-api-samples/tree/master system API sample application] for some of the examples of how to use WebView in callbacks.

