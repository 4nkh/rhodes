# Rhodes Application

## App structure
The Rhodes application generator generates a basic application from the "rhodes app" option. It will generate subdirectories and controller and template files when specifying a model and actions. Please refer to the [Rhodes generator](rhodes_generator) documentation for more detailed information about the Rhodes directory structure.

### Example Directory Structure
As an example, /sugar could be the root folder for an application that provides mobile access to SugarCRM. The app's root directory will contain a few .erb files, depending on the app's functionality. At the very least there will be an index.erb file that serves as the default landing page. This default landing page will typically have links to the controllers for some of the data models, and is not associated with any specific controller. In case the application needs a default landing page associated with a controller, it is recommended to create a model/controller/view folder and use an action on this controller as a default start path. To do that, edit the start_path property in the [Configuration]() framework configuration file.

## Model/View/Controller
By convention, files for each Model include a controller, a model class and view templates described below.

### Controller
Developer may create any number of controller actions by simple defining new methods in the controller class. Each action associated with url and can be performed by calling that url from the View in the WebView control. WebView control is a Web Browser imbedded in the application UI.  

For example, if you have Account Model your controller actions will be in account_controller.rb file. To defined action 'list' you will create method 'list' in the account_controller.rb file:
	:::ruby
	def list
		#implement required business logic here
		#...
		#return result to the browser
		render :action => :list
	end  

From the View list action will be available as 'Account/list' url.	

Each generated model controller has several actions to perform basic CRUD (create, read, update and delete) on the object. These actions are:

* index - lists all objects
* new - displays the editing form for creating a new object
* create - actually creates the object
* edit - edits an existing object
* update - updates properties of the object
* show - views the object
* delete - deletes the object

Generated set of actions (and the associated URL paths) follows the Rails scaffolding pattern for creating CRUD actions for objects and the associated "map resources" convention for routing to those actions. 

### Model
To store data locally Rhodes uses Sqlite on iPhone, Android, and Windows Mobile. On Blackberry version up to 5.0 Rhodes uses Hsql. On version 5.0 and higher it is possible to use Sqlite or Hsql. To access and manipulate stored data you may use [Rhom](rhom). Rhom is a mini ORM (object relational mapper) for Rhodes. It provides a high level way to make the local database easier to program to.  

By convention, your model class is located in the model's folder. For the model "UserBase" the file would be called "user_base.rb"

Example of added upper_name method to the model:

	:::ruby
	class UserBase
		include Rhom::PropertyBag
	  	#add model specific code here
	  	def upper_name
	    	self.name.upcase
	  	end
	end

You may define PropertyBag model or FixedSchema models. In first case model object may have any number of attributes and developer may create them on the fly by assigning values to an attribute. Fixed schema is more rigid and attributes of such objects should be defined at compile time. But Fixed Schema objects will require significantly less space on the target device. See more details about Rhom [here](rhom).

### Views (Templates)
Each controller action usually associated with a View template. The .erb files mentioned above are the templates used for views. Rhodes follows the Rails convention for template naming.

* index.erb - lists the data model objects
* edit.erb - lets you edit the object
* show.erb - shows the object's attribute values
* new.erb - creates a new object

These files are all created by the [rhodes generator](rhodes_generator). Inside the template, any valid HTML, JavaScript, and Ruby can be used, with Ruby code enclosed in <% and %> tags. See more information about ERB [here](http://www.ruby-doc.org/stdlib/libdoc/erb/rdoc/).

To send View to the browser, use render method in your controller. For example, to render list.erb, make following call in your controller:

	:::ruby
	render :action => :list 
	
Rhodes framework will load list.erb template, process it, and send resulted HTML to the browser.	

## View Layouts

Rhodes supports a layout mechanism based on ERB templates. The default layout template is called "layout.erb" and is located in the application root folder.  Unless overridden, this layout is rendered on all non-Ajax requests.

### Customizing Layouts

If you would like to override or customize layout behavior, you can call the render function with the following parameters:

	:::ruby
	render :action => 'index', :layout => 'mycustomlayout', :use_layout_on_ajax => false

The first argument is the action you would like to render.  Next is the (optional) layout name, which assumes the application root as a base directory.  In the above example, Rhodes would look for a file called "mycustomlayout.erb" in the application root directory (you also may use :layout => false to disable the use of a layout template).  The use_layout_on_ajax argument tells Rhodes whether or not to use the layout on Ajax calls (default is false). 

You can call the layout method on the controller to overwrite the default layout name:

	:::ruby
	layout :mycustomlayout

This will force the render call to use mycustomlayout.erb in place of the default layout file for all actions of this controller.

## Per Platform Files

On a per platform basis, you can use alternative files for any given file in your 'app' or 'public' folder. To do this, make a second file with the platform in the name of the file. For example, to replace these files on the Android platform...

	default.css
	index.erb

... All you need to do is add the two files

	default.android.css
	index.android.erb

Note that you must still have the base file present for it to be replaced on a platform.

Valid platform names are:

* android
* wm
* bb
* iphone

## AppApplication class
The file application.rb contains the AppAplication class:
	:::ruby
	class AppApplication < Rho::RhoApplication
	  def initialize
	    #put initialization code here
	  end
	  def on_activate_app
	    # Invokes when application activates. 
	  end 
	  def on_deactivate_app
	    # Invokes when application go to background
	    # Only restricted set of API allowed here
	    # If you call any UI operations here, they just ignored
	    # For example, WebView.refresh
 
	    #to stop sync background thread call SyncEngine.stop_sync; SyncEngine.set_pollinterval(0)
    
	    #To stop local server when application switched to background (so called 'service mode'). It will stop sync thread also
	    # in this case you have also stop sync thread
	    #return "stop_local_server"
    
	  end

	  def on_config_conflicts(conflicts)
	      #puts "on_config_conflicts: #{conflicts}"
	      # Invokes when application upgrade.
	      # If application bundle contain rhoconfig with properties modified locally on the phone
	      # conflicts is a hash name to array of conflicted values(local value, upgrade value)
	      # by default local values are kept in place
	  end

	end

You can store session data here. To get an instance of the AppApplication object:

	:::ruby
	::Rho.get_app

