//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace IsolatedStorageExplorer.ApplicationSessionService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicationInformation", Namespace="http://schemas.datacontract.org/2004/07/ExplorerService.Common.DataContracts")]
    public partial class ApplicationInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ApplicationNameField;
        
        private string DeviceNameField;
        
        private IsolatedStorageExplorer.ApplicationSessionService.DeviceType DeviceTypeField;
        
        private string VersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApplicationName {
            get {
                return this.ApplicationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationNameField, value) != true)) {
                    this.ApplicationNameField = value;
                    this.RaisePropertyChanged("ApplicationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IsolatedStorageExplorer.ApplicationSessionService.DeviceType DeviceType {
            get {
                return this.DeviceTypeField;
            }
            set {
                if ((this.DeviceTypeField.Equals(value) != true)) {
                    this.DeviceTypeField = value;
                    this.RaisePropertyChanged("DeviceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceType", Namespace="http://schemas.datacontract.org/2004/07/ExplorerService.Common.DataContracts")]
    public enum DeviceType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Device = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Emulator = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ApplicationSessionService.IApplicationSessionService")]
    public interface IApplicationSessionService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IApplicationSessionService/GetApplicationSessionId", ReplyAction="http://tempuri.org/IApplicationSessionService/GetApplicationSessionIdResponse")]
        System.IAsyncResult BeginGetApplicationSessionId(IsolatedStorageExplorer.ApplicationSessionService.ApplicationInformation information, System.AsyncCallback callback, object asyncState);
        
        System.Guid EndGetApplicationSessionId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IApplicationSessionService/Hearbeat", ReplyAction="http://tempuri.org/IApplicationSessionService/HearbeatResponse")]
        System.IAsyncResult BeginHearbeat(System.Guid applicationSessionId, System.AsyncCallback callback, object asyncState);
        
        bool EndHearbeat(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IApplicationSessionServiceChannel : IsolatedStorageExplorer.ApplicationSessionService.IApplicationSessionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetApplicationSessionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetApplicationSessionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Guid Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HearbeatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public HearbeatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ApplicationSessionServiceClient : System.ServiceModel.ClientBase<IsolatedStorageExplorer.ApplicationSessionService.IApplicationSessionService>, IsolatedStorageExplorer.ApplicationSessionService.IApplicationSessionService {
        
        private BeginOperationDelegate onBeginGetApplicationSessionIdDelegate;
        
        private EndOperationDelegate onEndGetApplicationSessionIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetApplicationSessionIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginHearbeatDelegate;
        
        private EndOperationDelegate onEndHearbeatDelegate;
        
        private System.Threading.SendOrPostCallback onHearbeatCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ApplicationSessionServiceClient() {
        }
        
        public ApplicationSessionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ApplicationSessionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationSessionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationSessionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetApplicationSessionIdCompletedEventArgs> GetApplicationSessionIdCompleted;
        
        public event System.EventHandler<HearbeatCompletedEventArgs> HearbeatCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IsolatedStorageExplorer.ApplicationSessionService.IApplicationSessionService.BeginGetApplicationSessionId(IsolatedStorageExplorer.ApplicationSessionService.ApplicationInformation information, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetApplicationSessionId(information, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Guid IsolatedStorageExplorer.ApplicationSessionService.IApplicationSessionService.EndGetApplicationSessionId(System.IAsyncResult result) {
            return base.Channel.EndGetApplicationSessionId(result);
        }
        
        private System.IAsyncResult OnBeginGetApplicationSessionId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            IsolatedStorageExplorer.ApplicationSessionService.ApplicationInformation information = ((IsolatedStorageExplorer.ApplicationSessionService.ApplicationInformation)(inValues[0]));
            return ((IsolatedStorageExplorer.ApplicationSessionService.IApplicationSessionService)(this)).BeginGetApplicationSessionId(information, callback, asyncState);
        }
        
        private object[] OnEndGetApplicationSessionId(System.IAsyncResult result) {
            System.Guid retVal = ((IsolatedStorageExplorer.ApplicationSessionService.IApplicationSessionService)(this)).EndGetApplicationSessionId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetApplicationSessionIdCompleted(object state) {
            if ((this.GetApplicationSessionIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetApplicationSessionIdCompleted(this, new GetApplicationSessionIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetApplicationSessionIdAsync(IsolatedStorageExplorer.ApplicationSessionService.ApplicationInformation information) {
            this.GetApplicationSessionIdAsync(information, null);
        }
        
        public void GetApplicationSessionIdAsync(IsolatedStorageExplorer.ApplicationSessionService.ApplicationInformation information, object userState) {
            if ((this.onBeginGetApplicationSessionIdDelegate == null)) {
                this.onBeginGetApplicationSessionIdDelegate = new BeginOperationDelegate(this.OnBeginGetApplicationSessionId);
            }
            if ((this.onEndGetApplicationSessionIdDelegate == null)) {
                this.onEndGetApplicationSessionIdDelegate = new EndOperationDelegate(this.OnEndGetApplicationSessionId);
            }
            if ((this.onGetApplicationSessionIdCompletedDelegate == null)) {
                this.onGetApplicationSessionIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetApplicationSessionIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetApplicationSessionIdDelegate, new object[] {
                        information}, this.onEndGetApplicationSessionIdDelegate, this.onGetApplicationSessionIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IsolatedStorageExplorer.ApplicationSessionService.IApplicationSessionService.BeginHearbeat(System.Guid applicationSessionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHearbeat(applicationSessionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool IsolatedStorageExplorer.ApplicationSessionService.IApplicationSessionService.EndHearbeat(System.IAsyncResult result) {
            return base.Channel.EndHearbeat(result);
        }
        
        private System.IAsyncResult OnBeginHearbeat(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid applicationSessionId = ((System.Guid)(inValues[0]));
            return ((IsolatedStorageExplorer.ApplicationSessionService.IApplicationSessionService)(this)).BeginHearbeat(applicationSessionId, callback, asyncState);
        }
        
        private object[] OnEndHearbeat(System.IAsyncResult result) {
            bool retVal = ((IsolatedStorageExplorer.ApplicationSessionService.IApplicationSessionService)(this)).EndHearbeat(result);
            return new object[] {
                    retVal};
        }
        
        private void OnHearbeatCompleted(object state) {
            if ((this.HearbeatCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HearbeatCompleted(this, new HearbeatCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HearbeatAsync(System.Guid applicationSessionId) {
            this.HearbeatAsync(applicationSessionId, null);
        }
        
        public void HearbeatAsync(System.Guid applicationSessionId, object userState) {
            if ((this.onBeginHearbeatDelegate == null)) {
                this.onBeginHearbeatDelegate = new BeginOperationDelegate(this.OnBeginHearbeat);
            }
            if ((this.onEndHearbeatDelegate == null)) {
                this.onEndHearbeatDelegate = new EndOperationDelegate(this.OnEndHearbeat);
            }
            if ((this.onHearbeatCompletedDelegate == null)) {
                this.onHearbeatCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHearbeatCompleted);
            }
            base.InvokeAsync(this.onBeginHearbeatDelegate, new object[] {
                        applicationSessionId}, this.onEndHearbeatDelegate, this.onHearbeatCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IsolatedStorageExplorer.ApplicationSessionService.IApplicationSessionService CreateChannel() {
            return new ApplicationSessionServiceClientChannel(this);
        }
        
        private class ApplicationSessionServiceClientChannel : ChannelBase<IsolatedStorageExplorer.ApplicationSessionService.IApplicationSessionService>, IsolatedStorageExplorer.ApplicationSessionService.IApplicationSessionService {
            
            public ApplicationSessionServiceClientChannel(System.ServiceModel.ClientBase<IsolatedStorageExplorer.ApplicationSessionService.IApplicationSessionService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetApplicationSessionId(IsolatedStorageExplorer.ApplicationSessionService.ApplicationInformation information, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = information;
                System.IAsyncResult _result = base.BeginInvoke("GetApplicationSessionId", _args, callback, asyncState);
                return _result;
            }
            
            public System.Guid EndGetApplicationSessionId(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Guid _result = ((System.Guid)(base.EndInvoke("GetApplicationSessionId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginHearbeat(System.Guid applicationSessionId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = applicationSessionId;
                System.IAsyncResult _result = base.BeginInvoke("Hearbeat", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndHearbeat(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Hearbeat", _args, result)));
                return _result;
            }
        }
    }
}
