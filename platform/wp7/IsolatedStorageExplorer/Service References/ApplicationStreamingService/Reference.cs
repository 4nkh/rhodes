//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace IsolatedStorageExplorer.ApplicationStreamingService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ApplicationStreamingService.IApplicationStreamingService")]
    public interface IApplicationStreamingService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IApplicationStreamingService/UploadStreamChunk", ReplyAction="http://tempuri.org/IApplicationStreamingService/UploadStreamChunkResponse")]
        System.IAsyncResult BeginUploadStreamChunk(System.Guid applicationSessionId, System.Guid streamId, byte[] chunk, long bytesLeft, System.AsyncCallback callback, object asyncState);
        
        void EndUploadStreamChunk(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IApplicationStreamingService/GetNextStreamChunk", ReplyAction="http://tempuri.org/IApplicationStreamingService/GetNextStreamChunkResponse")]
        System.IAsyncResult BeginGetNextStreamChunk(System.Guid applicationId, System.Guid streamId, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetNextStreamChunk(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IApplicationStreamingServiceChannel : IsolatedStorageExplorer.ApplicationStreamingService.IApplicationStreamingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNextStreamChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNextStreamChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ApplicationStreamingServiceClient : System.ServiceModel.ClientBase<IsolatedStorageExplorer.ApplicationStreamingService.IApplicationStreamingService>, IsolatedStorageExplorer.ApplicationStreamingService.IApplicationStreamingService {
        
        private BeginOperationDelegate onBeginUploadStreamChunkDelegate;
        
        private EndOperationDelegate onEndUploadStreamChunkDelegate;
        
        private System.Threading.SendOrPostCallback onUploadStreamChunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNextStreamChunkDelegate;
        
        private EndOperationDelegate onEndGetNextStreamChunkDelegate;
        
        private System.Threading.SendOrPostCallback onGetNextStreamChunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ApplicationStreamingServiceClient() {
        }
        
        public ApplicationStreamingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ApplicationStreamingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationStreamingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationStreamingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadStreamChunkCompleted;
        
        public event System.EventHandler<GetNextStreamChunkCompletedEventArgs> GetNextStreamChunkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IsolatedStorageExplorer.ApplicationStreamingService.IApplicationStreamingService.BeginUploadStreamChunk(System.Guid applicationSessionId, System.Guid streamId, byte[] chunk, long bytesLeft, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadStreamChunk(applicationSessionId, streamId, chunk, bytesLeft, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void IsolatedStorageExplorer.ApplicationStreamingService.IApplicationStreamingService.EndUploadStreamChunk(System.IAsyncResult result) {
            base.Channel.EndUploadStreamChunk(result);
        }
        
        private System.IAsyncResult OnBeginUploadStreamChunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid applicationSessionId = ((System.Guid)(inValues[0]));
            System.Guid streamId = ((System.Guid)(inValues[1]));
            byte[] chunk = ((byte[])(inValues[2]));
            long bytesLeft = ((long)(inValues[3]));
            return ((IsolatedStorageExplorer.ApplicationStreamingService.IApplicationStreamingService)(this)).BeginUploadStreamChunk(applicationSessionId, streamId, chunk, bytesLeft, callback, asyncState);
        }
        
        private object[] OnEndUploadStreamChunk(System.IAsyncResult result) {
            ((IsolatedStorageExplorer.ApplicationStreamingService.IApplicationStreamingService)(this)).EndUploadStreamChunk(result);
            return null;
        }
        
        private void OnUploadStreamChunkCompleted(object state) {
            if ((this.UploadStreamChunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadStreamChunkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadStreamChunkAsync(System.Guid applicationSessionId, System.Guid streamId, byte[] chunk, long bytesLeft) {
            this.UploadStreamChunkAsync(applicationSessionId, streamId, chunk, bytesLeft, null);
        }
        
        public void UploadStreamChunkAsync(System.Guid applicationSessionId, System.Guid streamId, byte[] chunk, long bytesLeft, object userState) {
            if ((this.onBeginUploadStreamChunkDelegate == null)) {
                this.onBeginUploadStreamChunkDelegate = new BeginOperationDelegate(this.OnBeginUploadStreamChunk);
            }
            if ((this.onEndUploadStreamChunkDelegate == null)) {
                this.onEndUploadStreamChunkDelegate = new EndOperationDelegate(this.OnEndUploadStreamChunk);
            }
            if ((this.onUploadStreamChunkCompletedDelegate == null)) {
                this.onUploadStreamChunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadStreamChunkCompleted);
            }
            base.InvokeAsync(this.onBeginUploadStreamChunkDelegate, new object[] {
                        applicationSessionId,
                        streamId,
                        chunk,
                        bytesLeft}, this.onEndUploadStreamChunkDelegate, this.onUploadStreamChunkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IsolatedStorageExplorer.ApplicationStreamingService.IApplicationStreamingService.BeginGetNextStreamChunk(System.Guid applicationId, System.Guid streamId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNextStreamChunk(applicationId, streamId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] IsolatedStorageExplorer.ApplicationStreamingService.IApplicationStreamingService.EndGetNextStreamChunk(System.IAsyncResult result) {
            return base.Channel.EndGetNextStreamChunk(result);
        }
        
        private System.IAsyncResult OnBeginGetNextStreamChunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid applicationId = ((System.Guid)(inValues[0]));
            System.Guid streamId = ((System.Guid)(inValues[1]));
            return ((IsolatedStorageExplorer.ApplicationStreamingService.IApplicationStreamingService)(this)).BeginGetNextStreamChunk(applicationId, streamId, callback, asyncState);
        }
        
        private object[] OnEndGetNextStreamChunk(System.IAsyncResult result) {
            byte[] retVal = ((IsolatedStorageExplorer.ApplicationStreamingService.IApplicationStreamingService)(this)).EndGetNextStreamChunk(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNextStreamChunkCompleted(object state) {
            if ((this.GetNextStreamChunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNextStreamChunkCompleted(this, new GetNextStreamChunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNextStreamChunkAsync(System.Guid applicationId, System.Guid streamId) {
            this.GetNextStreamChunkAsync(applicationId, streamId, null);
        }
        
        public void GetNextStreamChunkAsync(System.Guid applicationId, System.Guid streamId, object userState) {
            if ((this.onBeginGetNextStreamChunkDelegate == null)) {
                this.onBeginGetNextStreamChunkDelegate = new BeginOperationDelegate(this.OnBeginGetNextStreamChunk);
            }
            if ((this.onEndGetNextStreamChunkDelegate == null)) {
                this.onEndGetNextStreamChunkDelegate = new EndOperationDelegate(this.OnEndGetNextStreamChunk);
            }
            if ((this.onGetNextStreamChunkCompletedDelegate == null)) {
                this.onGetNextStreamChunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNextStreamChunkCompleted);
            }
            base.InvokeAsync(this.onBeginGetNextStreamChunkDelegate, new object[] {
                        applicationId,
                        streamId}, this.onEndGetNextStreamChunkDelegate, this.onGetNextStreamChunkCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IsolatedStorageExplorer.ApplicationStreamingService.IApplicationStreamingService CreateChannel() {
            return new ApplicationStreamingServiceClientChannel(this);
        }
        
        private class ApplicationStreamingServiceClientChannel : ChannelBase<IsolatedStorageExplorer.ApplicationStreamingService.IApplicationStreamingService>, IsolatedStorageExplorer.ApplicationStreamingService.IApplicationStreamingService {
            
            public ApplicationStreamingServiceClientChannel(System.ServiceModel.ClientBase<IsolatedStorageExplorer.ApplicationStreamingService.IApplicationStreamingService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginUploadStreamChunk(System.Guid applicationSessionId, System.Guid streamId, byte[] chunk, long bytesLeft, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = applicationSessionId;
                _args[1] = streamId;
                _args[2] = chunk;
                _args[3] = bytesLeft;
                System.IAsyncResult _result = base.BeginInvoke("UploadStreamChunk", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUploadStreamChunk(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UploadStreamChunk", _args, result);
            }
            
            public System.IAsyncResult BeginGetNextStreamChunk(System.Guid applicationId, System.Guid streamId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = applicationId;
                _args[1] = streamId;
                System.IAsyncResult _result = base.BeginInvoke("GetNextStreamChunk", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetNextStreamChunk(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetNextStreamChunk", _args, result)));
                return _result;
            }
        }
    }
}
